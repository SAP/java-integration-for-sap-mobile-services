{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Java integration for SAP Mobile Services","text":"<p>This is a Java integration library for SAP Mobile Services APIs. For now, it only supports the Notification Backend API. More integrations may be implemented in the future.</p>"},{"location":"#notification-backend-api","title":"Notification Backend API","text":"<p>The Mobile Services Notification Backend API allows sending notifications to mobile devices.</p> <ul> <li>Client Documentation</li> <li>API Documentation</li> <li>JavaDoc</li> </ul>"},{"location":"gettingstarted/","title":"Getting Started","text":""},{"location":"gettingstarted/#integrate-the-library","title":"Integrate the library","text":"<p>Builds of the library are provided as a Maven module in Maven Central. You can use them the following way:</p> <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;com.sap.cloud.platform.mobile.services&lt;/groupId&gt;\n&lt;artifactId&gt;java-integration&lt;/artifactId&gt;\n&lt;version&gt;0.6.0-dev&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"gettingstarted/#connect-via-sap-mobile-services-settings-file","title":"Connect via SAP Mobile Services settings file","text":"<p>To connect to SAP Mobile Services you need to provide a settings file to the client library. The settings file contains the service endpoints and service keys for each mobile application. See SAP Mobile Services Documentation: Service Keys how to manage service keys.</p> <p>Example of a settings file:</p> <pre><code>{\n\"server\": \"https://any.mobile.application.url.com\",\n\"platform\": \"CF\",\n\"applicationId\": \"applicationId\",\n\"services\": [\n{\n\"name\": \"push\",\n\"serviceKeys\": [\n{\n\"alias\": \"myAlias\",\n\"url\": \"https://service.key.url.com/2787d5ea-17cb-4c71-85ca-a9600d4b97c9\",\n\"apiKey\": \"apiKey\"\n}\n]\n}\n]\n}\n</code></pre>"},{"location":"gettingstarted/#properties-of-settings-file","title":"Properties of Settings File","text":"Property Name Description Example Value <code>server</code> This is the mobile app URL, see SAP Mobile Services Cockpit &gt; Mobile Applications &gt; Native/MDK &gt; Your Application &gt; APIs <code>https://any.mobile.application.url.com</code> <code>platform</code> Which platform runs the mobile services. As of now, only Cloud Foundry is supported <code>CF</code> <code>applicationId</code> The Mobile Application Id, see  SAP Mobile Services Cockpit &gt; Mobile Applications &gt; Native/MDK &gt; Your Application &gt; Info <code>applicationId</code> <code>services</code> List of service specific configurations see next paragraph ]"},{"location":"gettingstarted/#service-setting","title":"Service Setting","text":"<p>Each service setting is represented as an entry in the services list and identified by the name.</p> Property Name Description Example Value <code>name</code> This specifies the service <code>push</code> <code>serviceKeys</code> You can configure a list of service keys, but the first one is used always."},{"location":"gettingstarted/#service-keys","title":"Service Keys","text":"<p>The service key is managed in the SAP Mobile Services Cockpit and assigned to roles. The roles controls access to the service API. <code>alias</code> and <code>url</code> are mandatory. Provide either the <code>apiKey</code> for API or <code>uaa</code> configuration from the X509 service key details.</p> Property Name Description Example Value <code>alias</code> The service key alias name <code>myAlias</code> <code>url</code> The service key URL pointing to the service instance <code>https://service.key.url.com/2787d5ea-17cb-4c71-85ca-a9600d4b97c9</code> <code>apiKey</code> The service key API key. This key is generated by Mobile Services <code>apiKey</code> <code>uaa</code> The uaa configuration from the X509 service key details"},{"location":"gettingstarted/#troubleshooting-xsuaa-client-json-class-path-issues","title":"Troubleshooting XSUAA Client JSON Class Path Issues","text":"<p>Please see Troubleshooting JSON classpath issues.</p>"},{"location":"gettingstarted/#connect-via-cloud-foundry-binding","title":"Connect via Cloud Foundry Binding","text":"<p>If your application runs on a Cloud Foundry runtime in SAP BTP, it's easy to bind it to an SAP Mobile Services Cloud Foundry service instance. To bind the service instance, you can use the <code>cf bind-service</code> command. See Cloud Foundry CLI Reference Guide: bind-service how to manage service bindings.</p> <p>Once your application is bound to the service instance, you can retrieve it in your application:</p> <pre><code>MobileServicesBinding mobileServicesBinding = MobileServicesBinding.fromVCAPVariables()\n.orElseThrow(() -&gt; new IllegalStateException(\"No mobile-services binding found\"));\n</code></pre> <p>Also see Cloud Foundry Binding Sample for a sample application that uses a service binding.</p>"},{"location":"push/","title":"Mobile Services Notification Backend API","text":""},{"location":"push/#useful-links","title":"Useful Links","text":"<ul> <li>SAP Help: Administration</li> <li>SAP Help: API Documentation</li> <li>SAP Help: Native Provider Notification Handling</li> </ul>"},{"location":"push/#basic-example","title":"Basic Example","text":"<pre><code>MobileServicesSettings mobileServicesSettings = MobileServicesSettings\n.fromResource(\"mobileservices.json\");\nPushClient pushClient = new PushClientBuilder().build(mobileServicesSettings);\nApnsNotification apnsNotification = ApnsNotification.builder()\n.alertTitle(\"alert_title\").alertBody(\"alert_body\").build();\nPushPayload pushPayload = PushPayload.builder().alert(\"alert\")\n.apns(apnsNotification).build();\nPushResponse pushResponse = pushClient.pushToUser(\"userId\", pushPayload);\n</code></pre>"},{"location":"push/#available-configuration-options","title":"Available Configuration Options","text":""},{"location":"push/#connect-timeout","title":"Connect Timeout","text":"<p>You may configure the connection timeout of the underlying HTTP client. If not configured, defaults to the default of the underlying client.</p> <pre><code>builder.withConnectTimeout(Duration.ofMillis(200))\n</code></pre>"},{"location":"push/#read-timeout","title":"Read Timeout","text":"<p>You may configure the read timeout of the underlying HTTP client. If not configured, defaults to the default of the underlying client.</p> <pre><code>builder.withReadTimeout(Duration.ofSeconds(2))\n</code></pre>"},{"location":"push/#tenant-id","title":"Tenant ID","text":"<p>You may configure a static tenant id. The id must be associated with a subscriber of your Mobile Services application. If not configured, defaults to the provider tenant.</p> <pre><code>builder.withTenantId(\"19f52077-c4fc-43b8-a8eb-4995779e1fa1\")\n</code></pre> <p>Note, this option is incompatible with the Tenant Supplier configuration.</p>"},{"location":"push/#tenant-supplier","title":"Tenant Supplier","text":"<p>You may configure a dynamic tenant supplier. The <code>get()</code> function is called for each request to determine the subscriber. The function can return the tenant id wrapped in an <code>Optional</code> or an empty <code>Optional</code> to use the provider tenant.</p> <p>The tenant id of a subscriber can be obtained during the <code>onSubscription</code> call of the SaaS Provisioning Service or in the Subscription Management Dashboard.</p> <pre><code>builder.withTenantSupplier(() -&gt; {\n// TODO: retrieve tenantId (e.g. from request context)\nString tenantId = \"19f52077-c4fc-43b8-a8eb-4995779e1fa1\";\nreturn Optional.of(tenantId);\n})\n</code></pre> <p>Note, this option is incompatible with the Tenant ID configuration.  </p>"},{"location":"push/#pushclient-methods","title":"PushClient Methods","text":""},{"location":"push/#pushtoapplication","title":"pushToApplication","text":"<p>This method allows to send a notification to all registered devices of a Mobile Application. It only requires the push payload as a parameter.</p>"},{"location":"push/#pushtodevice","title":"pushToDevice","text":"<p>This method sends a notification to a single registered device. You will need the user id and the device id to identify the device.</p>"},{"location":"push/#pushtousers","title":"pushToUsers","text":"<p>This will send the same notification to a list of users. If a user has multiple devices registered, all of them will receive the notification.</p>"},{"location":"push/#pushtogroup","title":"pushToGroup","text":"<p>This will send the same notification to a specific group. The group membership of a user / device is controlled via the device registration.</p>"},{"location":"push/#bulkpush","title":"bulkPush","text":"<p>Bulk push allows sending individual notifications to a list of users. The root notification is the \"default\" payload, if there is no specific notification for a user configured.</p>"},{"location":"push/#pushtocapability","title":"pushToCapability","text":"<p>Devices can register capabilities, by which they can be selected for notifications. This method will send the same notification to all given users and their matching devices.</p>"},{"location":"push/#pushtotopics","title":"pushToTopics","text":"<p>Devices can subscribe to topics to receive notifications based on that. This method sends the notification to all subscribers to any of the given topics.</p>"},{"location":"push/#getnotificationstatus","title":"getNotificationStatus","text":"<p>Allows your system to monitor sent notifications for success or failure. Your app may also confirm reception of the message.</p>"},{"location":"push/#getregistration","title":"getRegistration","text":"<p>Retrieve a single push registration by its ID.</p>"},{"location":"push/#getregistrations","title":"getRegistrations","text":"<p>Retrieve a list of registrations. Either (parameterless) get all registrations for a single mobile applications, or (optional username and group parameters) get a filtered list.</p>"},{"location":"push/#getregistrationsbyusername","title":"getRegistrationsByUsername","text":"<p>Shortcut for getRegistrations with a username filter.</p>"},{"location":"push/#getregistrationsbygroup","title":"getRegistrationsByGroup","text":"<p>Shortcut for getRegistrations with a group filter.</p>"},{"location":"push/#building-a-pushpayload","title":"Building a PushPayload","text":"<p>Building push payloads is supported by the builder pattern. You may create a basic push payload as follows:</p> <pre><code>PushPayload pushPayload=PushPayload.builder().alert(\"My Alert\").build();\n</code></pre> <p>Creating the specific APNS and FCM/GCM (and all other) payload objects follows the same structure and can be used in the PushPayload builder:</p> <pre><code>ApnsNotification apnsNotification=ApnsNotification.builder()\n.alertTitle(\"alert_title\").alertBody(\"alert_body\").build();\nPushPayload pushPayload=PushPayload.builder().apns(apnsNotification).build();\n</code></pre>"},{"location":"push/#common-message-properties","title":"Common Message Properties","text":"<p>The current REST API defines several common message properties, but mixes delivery options with message fields.</p> <p>Note:The property <code>sound</code> will have different values for APNs and FCM.</p> Property Description APNs Mapping/Notes FCM Mapping/Notes Others <code>alert</code> Single message shown on the device <code>alert.title</code> <code>alert</code> Supported by W3C and WNS <code>badge</code> Number shown at the app icon on the device screen Directly set by the notification manager when app is idle or inactive Handled by notification callback not supported by W3C <code>sound</code> Sound played back when notification is shown References sound file in '/Library/Sounds' References sound file in app resource folder <code>res/raw</code> not supported by W3C <code>data</code> Dictionary (key/value map) Handed over to notification callback, implemented by device Handled by notification callback"},{"location":"push/#common-delivery-options","title":"Common Delivery Options","text":"Property Description APNs Mapping/Notes FCM Mapping/Notes Others <code>priority</code> Notification delivery priority <code>high</code> or <code>normal</code> Translated to integer value Used directly"},{"location":"push/#error-handling","title":"Error Handling","text":"<p>The client will throw a list of RuntimeExceptions in case of any unexpected response from the backend.</p> Exception Description Mitigation <code>ClientException</code> Common root exception for all errors in the client. n/a <code>ClientUnauthorizedException</code> The authorization to SAP Mobile Services failed. Check your Mobile Services configuration. For example the configuration of service key scopes might be wrong. <code>NoMessageSentException</code> No message has been sent. There may have been an error in the payload or the identifiers of recipients. Check the response for more details on what went wrong. <code>TrialLimitExceededException</code> You are using a trial plan and exceeded the request limits for it. Wait until you can send requests again."}]}