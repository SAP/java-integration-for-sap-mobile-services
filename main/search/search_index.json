{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Java integration for SAP Mobile Services This is a Java integration library for SAP Mobile Services APIs. For now, it only supports the Notification Backend API. More integrations may be implemented in the future. Notification Backend API The Mobile Services Notification Backend API allows sending notifications to mobile devices. Client Documentation API Documentation JavaDoc","title":"Introduction"},{"location":"#java-integration-for-sap-mobile-services","text":"This is a Java integration library for SAP Mobile Services APIs. For now, it only supports the Notification Backend API. More integrations may be implemented in the future.","title":"Java integration for SAP Mobile Services"},{"location":"#notification-backend-api","text":"The Mobile Services Notification Backend API allows sending notifications to mobile devices. Client Documentation API Documentation JavaDoc","title":"Notification Backend API"},{"location":"gettingstarted/","text":"Getting Started Integrate the library Builds of the library are provided as a Maven module in Maven Central. You can use them the following way: <dependency> <groupId> com.sap.cloud.platform.mobile.services </groupId> <artifactId> java-integration </artifactId> <version> 0.0.1-SNAPSHOT </version> </dependency> Connect via SAP Mobile Services settings file To connect to SAP Mobile Services you need to provide a settings file to the client library. The settings file contains the service endpoints and service keys for each mobile application. See SAP Mobile Services Documentation: Service Keys how to manage service keys. Example of a settings file: { \"server\" : \"https://any.mobile.application.url.com\" , \"platform\" : \"CF\" , \"applicationId\" : \"applicationId\" , \"services\" : [ { \"name\" : \"push\" , \"serviceKeys\" : [ { \"alias\" : \"myAlias\" , \"url\" : \"https://service.key.url.com/2787d5ea-17cb-4c71-85ca-a9600d4b97c9\" , \"apiKey\" : \"apiKey\" } ] } ] } Properties of Settings File Property Name Description Example Value server This is the mobile app URL, see SAP Mobile Services Cockpit > Mobile Applications > Native/MDK > Your Application > APIs https://any.mobile.application.url.com platform Which platform runs the mobile services. As of now, only Cloud Foundry is supported CF applicationId The Mobile Application Id, see SAP Mobile Services Cockpit > Mobile Applications > Native/MDK > Your Application > Info applicationId services List of service specific configurations see next paragraph ] Service Setting Each service setting is represented as an entry in the services list and identified by the name. Property Name Description Example Value name This specifies the service push serviceKeys You can configure a list of service keys, but the first one is used always. Service Keys The service key is managed in the SAP Mobile Services Cockpit and assigned to roles. The roles controls access to the service API. Property Name Description Example Value alias The service key alias name myAlias url The service key URL pointing to the service instance https://service.key.url.com/2787d5ea-17cb-4c71-85ca-a9600d4b97c9 apiKey The service key API key. This key is generated by Mobile Services apiKey Connect via Cloud Foundry Binding If your application runs on a Cloud Foundry runtime in SAP BTP, it's easy to bind it to an SAP Mobile Services Cloud Foundry service instance. To bind the service instance, you can use the cf bind-service command. See Cloud Foundry CLI Reference Guide: bind-service how to manage service bindings. Once your application is bound to the service instance, you can retrieve it in your application: MobileServicesBinding mobileServicesBinding = MobileServicesBinding . fromVCAPVariables () . orElseThrow (() -> new IllegalStateException ( \"No mobile-services binding found\" )); Also see Cloud Foundry Binding Sample for a sample application that uses a service binding.","title":"Getting Started"},{"location":"gettingstarted/#getting-started","text":"","title":"Getting Started"},{"location":"gettingstarted/#integrate-the-library","text":"Builds of the library are provided as a Maven module in Maven Central. You can use them the following way: <dependency> <groupId> com.sap.cloud.platform.mobile.services </groupId> <artifactId> java-integration </artifactId> <version> 0.0.1-SNAPSHOT </version> </dependency>","title":"Integrate the library"},{"location":"gettingstarted/#connect-via-sap-mobile-services-settings-file","text":"To connect to SAP Mobile Services you need to provide a settings file to the client library. The settings file contains the service endpoints and service keys for each mobile application. See SAP Mobile Services Documentation: Service Keys how to manage service keys. Example of a settings file: { \"server\" : \"https://any.mobile.application.url.com\" , \"platform\" : \"CF\" , \"applicationId\" : \"applicationId\" , \"services\" : [ { \"name\" : \"push\" , \"serviceKeys\" : [ { \"alias\" : \"myAlias\" , \"url\" : \"https://service.key.url.com/2787d5ea-17cb-4c71-85ca-a9600d4b97c9\" , \"apiKey\" : \"apiKey\" } ] } ] }","title":"Connect via SAP Mobile Services settings file"},{"location":"gettingstarted/#properties-of-settings-file","text":"Property Name Description Example Value server This is the mobile app URL, see SAP Mobile Services Cockpit > Mobile Applications > Native/MDK > Your Application > APIs https://any.mobile.application.url.com platform Which platform runs the mobile services. As of now, only Cloud Foundry is supported CF applicationId The Mobile Application Id, see SAP Mobile Services Cockpit > Mobile Applications > Native/MDK > Your Application > Info applicationId services List of service specific configurations see next paragraph ]","title":"Properties of Settings File"},{"location":"gettingstarted/#service-setting","text":"Each service setting is represented as an entry in the services list and identified by the name. Property Name Description Example Value name This specifies the service push serviceKeys You can configure a list of service keys, but the first one is used always.","title":"Service Setting"},{"location":"gettingstarted/#service-keys","text":"The service key is managed in the SAP Mobile Services Cockpit and assigned to roles. The roles controls access to the service API. Property Name Description Example Value alias The service key alias name myAlias url The service key URL pointing to the service instance https://service.key.url.com/2787d5ea-17cb-4c71-85ca-a9600d4b97c9 apiKey The service key API key. This key is generated by Mobile Services apiKey","title":"Service Keys"},{"location":"gettingstarted/#connect-via-cloud-foundry-binding","text":"If your application runs on a Cloud Foundry runtime in SAP BTP, it's easy to bind it to an SAP Mobile Services Cloud Foundry service instance. To bind the service instance, you can use the cf bind-service command. See Cloud Foundry CLI Reference Guide: bind-service how to manage service bindings. Once your application is bound to the service instance, you can retrieve it in your application: MobileServicesBinding mobileServicesBinding = MobileServicesBinding . fromVCAPVariables () . orElseThrow (() -> new IllegalStateException ( \"No mobile-services binding found\" )); Also see Cloud Foundry Binding Sample for a sample application that uses a service binding.","title":"Connect via Cloud Foundry Binding"},{"location":"push/","text":"Mobile Services Notification Backend API Useful Links SAP Help: Administration SAP Help: API Documentation SAP Help: Native Provider Notification Handling Basic Example MobileServicesSettings mobileServicesSettings = MobileServicesSettings . fromResource ( \"mobileservices.json\" ); PushClient pushClient = new PushClientBuilder (). build ( mobileServicesSettings ); ApnsNotification apnsNotification = ApnsNotification . builder () . alertTitle ( \"alert_title\" ). alertBody ( \"alert_body\" ). build (); PushPayload pushPayload = PushPayload . builder (). alert ( \"alert\" ) . apns ( apnsNotification ). build (); PushResponse pushResponse = pushClient . pushToUser ( \"userId\" , pushPayload ); Available Configuration Options Connect Timeout You may configure the connection timeout of the underlying HTTP client. If not configured, defaults to the default of the underlying client. builder . withConnectTimeout ( Duration . ofMillis ( 200 )) Read Timeout You may configure the read timeout of the underlying HTTP client. If not configured, defaults to the default of the underlying client. builder . withReadTimeout ( Duration . ofSeconds ( 2 )) Tenant ID You may configure a static tenant id. The id must be associated with a subscriber of your Mobile Services application. If not configured, defaults to the provider tenant. builder . withTenantId ( \"19f52077-c4fc-43b8-a8eb-4995779e1fa1\" ) Note, this option is incompatible with the Tenant Resolver configuration. Tenant Resolver You may configure a dynamic tenant resolver. The resolver function is called for each request to determine the subscriber. The function can return the tenant id wrapped in an Optional or an empty Optional to use the provider tenant. The tenant id of a subscriber can be obtained during the onSubscription call of the SaaS Provisioning Service or in the Subscription Management Dashboard . builder . withTenantResolver (() -> { // TODO: retrieve tenantId (e.g. from request context) String tenantId = \"19f52077-c4fc-43b8-a8eb-4995779e1fa1\" ; return Optional . of ( tenantId ); }) Note, this option is incompatible with the Tenant ID configuration. PushClient Methods pushToApplication This method allows to send a notification to all registered devices of a Mobile Application. It only requires the push payload as a parameter. pushToDevice This method sends a notification to a single registered device. You will need the user id and the device id to identify the device. pushToUsers This will send the same notification to a list of users. If a user has multiple devices registered, all of them will receive the notification. pushToGroup This will send the same notification to a specific group. The group membership of a user / device is controlled via the device registration. bulkPush Bulk push allows sending individual notifications to a list of users. The root notification is the \"default\" payload, if there is no specific notification for a user configured. pushToCapability Devices can register capabilities, by which they can be selected for notifications. This method will send the same notification to all given users and their matching devices. getNotificationStatus Allows your system to monitor sent notifications for success or failure. Your app may also confirm reception of the message. Building a PushPayload Building push payloads is supported by the builder pattern. You may create a basic push payload as follows: PushPayload pushPayload = PushPayload . builder (). alert ( \"My Alert\" ). build (); Creating the specific APNS and FCM/GCM (and all other) payload objects follows the same structure and can be used in the PushPayload builder: ApnsNotification apnsNotification = ApnsNotification . builder () . alertTitle ( \"alert_title\" ). alertBody ( \"alert_body\" ). build (); PushPayload pushPayload = PushPayload . builder (). apns ( apnsNotification ). build (); Common Message Properties The current REST API defines several common message properties, but mixes delivery options with message fields. Note :The property sound will have different values for APNs and FCM. Property Description APNs Mapping/Notes FCM Mapping/Notes Others alert Single message shown on the device alert.title alert Supported by W3C and WNS badge Number shown at the app icon on the device screen Directly set by the notification manager when app is idle or inactive Handled by notification callback not supported by W3C sound Sound played back when notification is shown References sound file in '/Library/Sounds' References sound file in app resource folder res/raw not supported by W3C data Dictionary (key/value map) Handed over to notification callback, implemented by device Handled by notification callback Common Delivery Options Property Description APNs Mapping/Notes FCM Mapping/Notes Others priority Notification delivery priority high or normal Translated to integer value Used directly Error Handling The client will throw a list of RuntimeExceptions in case of any unexpected response from the backend. Exception Description Mitigation ClientException Common root exception for all errors in the client. n/a ClientUnauthorizedException The authorization to SAP Mobile Services failed. Check your Mobile Services configuration. For example the configuration of service key scopes might be wrong. NoMessageSentException No message has been sent. There may have been an error in the payload or the identifiers of recipients. Check the response for more details on what went wrong. TrialLimitExceededException You are using a trial plan and exceeded the request limits for it. Wait until you can send requests again.","title":"Notification Backend API"},{"location":"push/#mobile-services-notification-backend-api","text":"","title":"Mobile Services Notification Backend API"},{"location":"push/#useful-links","text":"SAP Help: Administration SAP Help: API Documentation SAP Help: Native Provider Notification Handling","title":"Useful Links"},{"location":"push/#basic-example","text":"MobileServicesSettings mobileServicesSettings = MobileServicesSettings . fromResource ( \"mobileservices.json\" ); PushClient pushClient = new PushClientBuilder (). build ( mobileServicesSettings ); ApnsNotification apnsNotification = ApnsNotification . builder () . alertTitle ( \"alert_title\" ). alertBody ( \"alert_body\" ). build (); PushPayload pushPayload = PushPayload . builder (). alert ( \"alert\" ) . apns ( apnsNotification ). build (); PushResponse pushResponse = pushClient . pushToUser ( \"userId\" , pushPayload );","title":"Basic Example"},{"location":"push/#available-configuration-options","text":"","title":"Available Configuration Options"},{"location":"push/#connect-timeout","text":"You may configure the connection timeout of the underlying HTTP client. If not configured, defaults to the default of the underlying client. builder . withConnectTimeout ( Duration . ofMillis ( 200 ))","title":"Connect Timeout"},{"location":"push/#read-timeout","text":"You may configure the read timeout of the underlying HTTP client. If not configured, defaults to the default of the underlying client. builder . withReadTimeout ( Duration . ofSeconds ( 2 ))","title":"Read Timeout"},{"location":"push/#tenant-id","text":"You may configure a static tenant id. The id must be associated with a subscriber of your Mobile Services application. If not configured, defaults to the provider tenant. builder . withTenantId ( \"19f52077-c4fc-43b8-a8eb-4995779e1fa1\" ) Note, this option is incompatible with the Tenant Resolver configuration.","title":"Tenant ID"},{"location":"push/#tenant-resolver","text":"You may configure a dynamic tenant resolver. The resolver function is called for each request to determine the subscriber. The function can return the tenant id wrapped in an Optional or an empty Optional to use the provider tenant. The tenant id of a subscriber can be obtained during the onSubscription call of the SaaS Provisioning Service or in the Subscription Management Dashboard . builder . withTenantResolver (() -> { // TODO: retrieve tenantId (e.g. from request context) String tenantId = \"19f52077-c4fc-43b8-a8eb-4995779e1fa1\" ; return Optional . of ( tenantId ); }) Note, this option is incompatible with the Tenant ID configuration.","title":"Tenant Resolver"},{"location":"push/#pushclient-methods","text":"","title":"PushClient Methods"},{"location":"push/#pushtoapplication","text":"This method allows to send a notification to all registered devices of a Mobile Application. It only requires the push payload as a parameter.","title":"pushToApplication"},{"location":"push/#pushtodevice","text":"This method sends a notification to a single registered device. You will need the user id and the device id to identify the device.","title":"pushToDevice"},{"location":"push/#pushtousers","text":"This will send the same notification to a list of users. If a user has multiple devices registered, all of them will receive the notification.","title":"pushToUsers"},{"location":"push/#pushtogroup","text":"This will send the same notification to a specific group. The group membership of a user / device is controlled via the device registration.","title":"pushToGroup"},{"location":"push/#bulkpush","text":"Bulk push allows sending individual notifications to a list of users. The root notification is the \"default\" payload, if there is no specific notification for a user configured.","title":"bulkPush"},{"location":"push/#pushtocapability","text":"Devices can register capabilities, by which they can be selected for notifications. This method will send the same notification to all given users and their matching devices.","title":"pushToCapability"},{"location":"push/#getnotificationstatus","text":"Allows your system to monitor sent notifications for success or failure. Your app may also confirm reception of the message.","title":"getNotificationStatus"},{"location":"push/#building-a-pushpayload","text":"Building push payloads is supported by the builder pattern. You may create a basic push payload as follows: PushPayload pushPayload = PushPayload . builder (). alert ( \"My Alert\" ). build (); Creating the specific APNS and FCM/GCM (and all other) payload objects follows the same structure and can be used in the PushPayload builder: ApnsNotification apnsNotification = ApnsNotification . builder () . alertTitle ( \"alert_title\" ). alertBody ( \"alert_body\" ). build (); PushPayload pushPayload = PushPayload . builder (). apns ( apnsNotification ). build ();","title":"Building a PushPayload"},{"location":"push/#common-message-properties","text":"The current REST API defines several common message properties, but mixes delivery options with message fields. Note :The property sound will have different values for APNs and FCM. Property Description APNs Mapping/Notes FCM Mapping/Notes Others alert Single message shown on the device alert.title alert Supported by W3C and WNS badge Number shown at the app icon on the device screen Directly set by the notification manager when app is idle or inactive Handled by notification callback not supported by W3C sound Sound played back when notification is shown References sound file in '/Library/Sounds' References sound file in app resource folder res/raw not supported by W3C data Dictionary (key/value map) Handed over to notification callback, implemented by device Handled by notification callback","title":"Common Message Properties"},{"location":"push/#common-delivery-options","text":"Property Description APNs Mapping/Notes FCM Mapping/Notes Others priority Notification delivery priority high or normal Translated to integer value Used directly","title":"Common Delivery Options"},{"location":"push/#error-handling","text":"The client will throw a list of RuntimeExceptions in case of any unexpected response from the backend. Exception Description Mitigation ClientException Common root exception for all errors in the client. n/a ClientUnauthorizedException The authorization to SAP Mobile Services failed. Check your Mobile Services configuration. For example the configuration of service key scopes might be wrong. NoMessageSentException No message has been sent. There may have been an error in the payload or the identifiers of recipients. Check the response for more details on what went wrong. TrialLimitExceededException You are using a trial plan and exceeded the request limits for it. Wait until you can send requests again.","title":"Error Handling"}]}