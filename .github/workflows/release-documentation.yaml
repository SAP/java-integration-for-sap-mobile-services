name: Release Documentation
on:
  workflow_dispatch: {}
  push:
    branches:
      - main
  workflow_call:
    {}
jobs:
  build-documentation:
    runs-on: ubuntu-latest
    name: Build Documentation
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: maven
      - run: |
          GROUP_ID=$( mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout )
          echo "groupId=$GROUP_ID" >> $GITHUB_ENV
          ARTIFACT_ID=$( mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout )
          echo "artifactId=$ARTIFACT_ID" >> $GITHUB_ENV
          VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )
          echo "artifactVersion=$VERSION" >> $GITHUB_ENV
        working-directory: client
      - uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "//ENTER GROUP ID//"
          replace: ${{ env.groupId }}
          regex: false
      - uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "//ENTER ARTIFACT ID//"
          replace: ${{ env.artifactId }}
          regex: false
      - uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "//ENTER LATEST BUILD VERSION//"
          replace: ${{ env.artifactVersion }}
          regex: false
      - name: Build Documentation
        uses: SAP/java-integration-for-sap-mobile-services@actions_build-mkdocs
      - uses: actions/upload-artifact@v3
        with:
          name: documentation-build
          path: site/**
  build-javadoc:
    runs-on: ubuntu-latest
    name: Build JavaDoc
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: maven
      - name: Build JavaDoc
        run: mvn -B javadoc:javadoc --file pom.xml
        working-directory: client
      - uses: actions/upload-artifact@v3
        with:
          name: javadoc-build
          path: client/target/site/apidocs/**
  publish-documentation:
    runs-on: ubuntu-latest
    name: Publish Documentation to GH-Pages
    concurrency: 'publish_docs'
    needs:
      - 'build-documentation'
      - 'build-javadoc'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: |
          TAG=$( echo $GITHUB_REF | cut -d'/' -f 3 )
          echo "tag=$TAG" >> $GITHUB_ENV
          RELEASE_FOLDER=$( echo $TAG | sed 's/\//_/g' )
          echo "release_folder=$RELEASE_FOLDER" >> $GITHUB_ENV
      - env:
          DOC_RELEASE_FOLDER: ${{ env.release_folder }}
        run: |
          git checkout gh-pages || (git checkout --orphan gh-pages && git rm -rf . && git clean -fxd)
          git rm -rf $DOC_RELEASE_FOLDER || true
          git clean -fxd || true
          mkdir -p $DOC_RELEASE_FOLDER
      - uses: actions/download-artifact@v3
        with:
          name: documentation-build
          path: ${{ env.tag }}
      - uses: actions/download-artifact@v3
        with:
          name: javadoc-build
          path: ${{ env.tag }}/javadoc
      - id: check-for-latest-release
        uses: SAP/java-integration-for-sap-mobile-services@actions_is-latest-release
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.ref }}
      - env:
          DOC_RELEASE_FOLDER: ${{ env.release_folder }}
        if: ${{ steps.check-for-latest-release.outputs.is-latest == 'true' }}
        run: |
          rm -rf current || true
          cp -R $DOC_RELEASE_FOLDER current
      - env:
          DOCS_COMMIT_MESSAGE: 'Update documentation for ${{ env.tag }}'
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com" 
          git config user.name "github-actions[bot]" 
          git add .
          git commit -m "$DOCS_COMMIT_MESSAGE"
          git remote rm origin
          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git pull origin gh-pages --rebase
          git push origin gh-pages